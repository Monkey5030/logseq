* [[python操作linux目录]]
*
# encoding=utf-8
# 作者：Admin
# 日期：2021/9/14 10:30
# 工具：PyCharm
import json
import sys
import time
from collections import Counter
from functools import wraps
import pandas as pd
import pymysql
# 修改文件保存方式
# sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf8')
class mysql_func():
    # 配置mysql数据库连接池
    def __init__(self, host='xxx', user='root', password='xxx', port=xxx, database='mysql',
                 charset='utf8'):
        self.host = host
        self.user = user
        self.password = password
        self.port = port
        self.database = database
        self.charset = charset
        self.database = pymysql.connect(host=host, user=user, password=password, port=port, database=database,
                                        charset=charset)
    # 取数据,tuple类型返回
    def get_data(self, sql):
        self.curors = self.database.cursor()
        self.curors.execute(sql)
        self.database.commit()
        data = self.curors.fetchall()
        self.curors.close()
        return data
    def get_column(self, sql):
        self.curors = self.database.cursor()
        self.curors.execute(sql)
        self.database.commit()
        column = self.curors.description
        self.curors.close()
        column_list = []
        for i in range(len(column)):
            column_list.append(column[i][0])
        return column_list
    # 存数据,int类型返回成功条数
    def get_row_number(self, sql, data=None):
        self.curors = self.database.cursor()
        if data is None or len(data) == 0:
            self.curors.execute(sql)
        else:
            if type(data[0]) != type([]):
                data = [data]
            self.curors.executemany(sql, data)
        self.database.commit()
        data = self.curors.rowcount
        self.curors.close()
        return data
    # 取数据,[dict]类型返回
    def get_json(self, sql):
        self.curors = self.database.cursor()
        self.curors.execute(sql)
        self.database.commit()
        columns = [col[0] for col in self.curors.description]
        data = [dict(zip(columns, row)) for row in self.curors.fetchall()]
        self.curors.close()
        return data